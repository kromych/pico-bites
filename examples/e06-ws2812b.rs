//! This example uses an Waveshare RP2040 Matrix board.
//!
//! The LEDs are connected to GPIO 16: https://www.waveshare.com/wiki/RP2040-Matrix#![no_std]
#![no_std]
#![no_main]

use panic_halt as _;
use smart_leds::brightness;
use smart_leds::SmartLedsWrite;
use smart_leds::RGB8;
use waveshare_rp2040_zero::{
    hal::{
        clocks::{init_clocks_and_plls, Clock},
        pac,
        pio::PIOExt,
        timer::Timer,
        watchdog::Watchdog,
        Sio,
    },
    Pins, XOSC_CRYSTAL_FREQ,
};
use ws2812_pio::Ws2812;

const STRIP_LEN: usize = 25;

#[waveshare_rp2040_zero::entry]
fn main() -> ! {
    let mut pac = pac::Peripherals::take().unwrap();
    let core = pac::CorePeripherals::take().unwrap();

    let mut watchdog = Watchdog::new(pac.WATCHDOG);

    let clocks = init_clocks_and_plls(
        XOSC_CRYSTAL_FREQ,
        pac.XOSC,
        pac.CLOCKS,
        pac.PLL_SYS,
        pac.PLL_USB,
        &mut pac.RESETS,
        &mut watchdog,
    )
    .ok()
    .unwrap();
    let sio = Sio::new(pac.SIO);
    let pins = Pins::new(
        pac.IO_BANK0,
        pac.PADS_BANK0,
        sio.gpio_bank0,
        &mut pac.RESETS,
    );

    let mut frame_delay =
        cortex_m::delay::Delay::new(core.SYST, clocks.system_clock.freq().to_Hz());
    let timer = Timer::new(pac.TIMER, &mut pac.RESETS);

    let (mut pio, sm0, _, _, _) = pac.PIO0.split(&mut pac.RESETS);
    let mut ws = Ws2812::new(
        // The onboard NeoPixel is attached to GPIO pin #16 on the Feather RP2040.
        pins.neopixel.into_mode(),
        &mut pio,
        sm0,
        clocks.peripheral_clock.freq(),
        timer.count_down(),
    );

    let leds: [RGB8; STRIP_LEN] = [(0, 128, 0).into(); STRIP_LEN];

    // Bring down the overall brightness of the strip to not blow
    // the USB power supply: every LED draws ~60mA, RGB means 3 LEDs per
    // ws2812 LED, for 3 LEDs that would be: 3 * 3 * 60mA, which is
    // already 540mA for just 3 white LEDs!
    let strip_brightness = 1u8; // Limit brightness to 1/256

    loop {
        ws.write(brightness(leds.iter().copied(), strip_brightness))
            .unwrap();

        // Wait a bit until calculating the next frame.
        frame_delay.delay_ms(35);
    }
}

const FONT_5X5: [[u8; 5]; 95] = [
    // ASCII 32-127
    [0b00000, 0b00000, 0b00000, 0b00000, 0b00000], // (space)
    [0b00100, 0b00100, 0b00100, 0b00000, 0b00100], // !
    [0b01010, 0b01010, 0b00000, 0b00000, 0b00000], // "
    [0b01010, 0b11111, 0b01010, 0b11111, 0b01010], // #
    [0b00100, 0b01111, 0b10100, 0b01011, 0b00100], // $
    [0b11001, 0b11010, 0b00100, 0b01011, 0b10011], // %
    [0b01100, 0b10010, 0b10101, 0b01000, 0b10100], // &
    [0b00100, 0b00100, 0b00000, 0b00000, 0b00000], // '
    [0b00010, 0b00100, 0b01000, 0b00100, 0b00010], // (
    [0b01000, 0b00100, 0b00010, 0b00100, 0b01000], // )
    [0b00100, 0b10101, 0b01110, 0b10101, 0b00100], // *
    [0b00000, 0b00100, 0b01110, 0b00100, 0b00000], // +
    [0b00000, 0b00000, 0b00000, 0b00100, 0b01000], // ,
    [0b00000, 0b00000, 0b01110, 0b00000, 0b00000], // -
    [0b00000, 0b00000, 0b00000, 0b00100, 0b00000], // .
    [0b00001, 0b00010, 0b00100, 0b01000, 0b10000], // /
    [0b01110, 0b10001, 0b10001, 0b10001, 0b01110], // 0
    [0b00100, 0b01100, 0b00100, 0b00100, 0b01110], // 1
    [0b01110, 0b10001, 0b00110, 0b01000, 0b11111], // 2
    [0b11111, 0b00010, 0b01110, 0b00001, 0b11110], // 3
    [0b10001, 0b10001, 0b11111, 0b00001, 0b00001], // 4
    [0b11111, 0b10000, 0b11110, 0b00001, 0b11110], // 5
    [0b01110, 0b10000, 0b11110, 0b10001, 0b01110], // 6
    [0b11111, 0b00001, 0b00010, 0b00100, 0b01000], // 7
    [0b01110, 0b10001, 0b01110, 0b10001, 0b01110], // 8
    [0b01110, 0b10001, 0b01111, 0b00001, 0b01110], // 9
    [0b00000, 0b00100, 0b00000, 0b00100, 0b00000], // :
    [0b00000, 0b00100, 0b00000, 0b00100, 0b01000], // ;
    [0b00010, 0b00100, 0b01000, 0b00100, 0b00010], // <
    [0b00000, 0b01110, 0b00000, 0b01110, 0b00000], // =
    [0b01000, 0b00100, 0b00010, 0b00100, 0b01000], // >
    [0b01110, 0b10001, 0b00010, 0b00000, 0b00100], // ?
    [0b01110, 0b10001, 0b10111, 0b10101, 0b01110], // @
    [0b01110, 0b10001, 0b11111, 0b10001, 0b10001], // A
    [0b11110, 0b10001, 0b11110, 0b10001, 0b11110], // B
    [0b01110, 0b10001, 0b10000, 0b10001, 0b01110], // C
    [0b11100, 0b10010, 0b10001, 0b10010, 0b11100], // D
    [0b11111, 0b10000, 0b11100, 0b10000, 0b11111], // E
    [0b11111, 0b10000, 0b11100, 0b10000, 0b10000], // F
    [0b01110, 0b10001, 0b10000, 0b10100, 0b01110], // G
    [0b10001, 0b10001, 0b11111, 0b10001, 0b10001], // H
    [0b01110, 0b00100, 0b00100, 0b00100, 0b01110], // I
    [0b00111, 0b00010, 0b00010, 0b10010, 0b01100], // J
    [0b10001, 0b10010, 0b11000, 0b10010, 0b10001], // K
    [0b10000, 0b10000, 0b10000, 0b10000, 0b11111], // L
    [0b10001, 0b11011, 0b10101, 0b10001, 0b10001], // M
    [0b10001, 0b11001, 0b10101, 0b10011, 0b10001], // N
    [0b01110, 0b10001, 0b10001, 0b10001, 0b01110], // O
    [0b11110, 0b10001, 0b11110, 0b10000, 0b10000], // P
    [0b01110, 0b10001, 0b10101, 0b10010, 0b01101], // Q
    [0b11110, 0b10001, 0b11110, 0b10010, 0b10001], // R
    [0b01110, 0b10000, 0b01110, 0b00001, 0b01110], // S
    [0b11111, 0b00100, 0b00100, 0b00100, 0b00100], // T
    [0b10001, 0b10001, 0b10001, 0b10001, 0b01110], // U
    [0b10001, 0b10001, 0b01010, 0b01010, 0b00100], // V
    [0b10001, 0b10001, 0b10101, 0b11011, 0b10001], // W
    [0b10001, 0b01010, 0b00100, 0b01010, 0b10001], // X
    [0b10001, 0b10001, 0b01110, 0b00100, 0b00100], // Y
    [0b11111, 0b00010, 0b00100, 0b01000, 0b11111], // Z
    [0b01110, 0b01000, 0b01000, 0b01000, 0b01110], // [
    [0b10000, 0b01000, 0b00100, 0b00010, 0b00001], // \
    [0b01110, 0b00010, 0b00010, 0b00010, 0b01110], // ]
    [0b00100, 0b01010, 0b10001, 0b00000, 0b00000], // ^
    [0b00000, 0b00000, 0b00000, 0b00000, 0b11111], // _
    [0b00100, 0b00100, 0b00010, 0b00000, 0b00000], // `
    [0b00000, 0b00110, 0b01000, 0b01110, 0b10001], // a
    [0b10000, 0b10000, 0b11100, 0b10010, 0b11100], // b
    [0b00000, 0b01100, 0b10000, 0b10000, 0b01100], // c
    [0b00010, 0b00010, 0b01110, 0b10010, 0b01110], // d
    [0b00000, 0b01100, 0b10100, 0b11000, 0b01100], // e
    [0b00100, 0b01010, 0b01100, 0b01000, 0b01000], // f
    [0b00000, 0b01110, 0b10010, 0b01110, 0b00010], // g
    [0b10000, 0b10000, 0b11100, 0b10010, 0b10010], // h
    [0b00100, 0b00000, 0b00100, 0b00100, 0b00100], // i
    [0b00010, 0b00000, 0b00010, 0b00010, 0b10010], // j
    [0b10000, 0b10010, 0b10100, 0b11000, 0b10100], // k
    [0b00100, 0b00100, 0b00100, 0b00100, 0b00100], // l
    [0b00000, 0b11010, 0b10101, 0b10101, 0b10101], // m
    [0b00000, 0b11100, 0b10010, 0b10010, 0b10010], // n
    [0b00000, 0b01100, 0b10010, 0b10010, 0b01100], // o
    [0b00000, 0b11100, 0b10010, 0b11100, 0b10000], // p
    [0b00000, 0b01110, 0b10010, 0b01110, 0b00010], // q
    [0b00000, 0b10100, 0b11000, 0b10000, 0b10000], // r
    [0b00000, 0b01100, 0b00100, 0b00010, 0b01100], // s
    [0b01000, 0b11100, 0b01000, 0b01000, 0b00100], // t
    [0b00000, 0b10010, 0b10010, 0b10010, 0b01110], // u
    [0b00000, 0b10001, 0b10001, 0b01010, 0b00100], // v
    [0b00000, 0b10001, 0b10101, 0b10101, 0b01010], // w
    [0b00000, 0b10001, 0b01010, 0b01010, 0b10001], // x
    [0b00000, 0b10010, 0b10010, 0b01110, 0b00010], // y
    [0b00000, 0b11110, 0b00100, 0b01000, 0b11110], // z
    [0b00100, 0b01000, 0b01000, 0b01000, 0b00100], // [
    [0b00100, 0b00100, 0b00000, 0b00100, 0b00100], // |
    [0b01000, 0b00100, 0b00100, 0b00100, 0b01000], // }
    [0b00000, 0b00000, 0b01010, 0b10100, 0b00000], // ~
];
